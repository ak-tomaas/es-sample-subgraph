type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BatchMetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _fromTokenId: BigInt! # uint256
  _toTokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimEarnings @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimEarningsAllRented @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  count: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimEarningsMultiple @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  tokenIds: [BigInt!]! # uint256[]
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewTRN @entity(immutable: true) {
  id: Bytes!
  name: String! # string
  acceptedToken: Bytes! # address
  svcStartDate: BigInt! # uint256
  usefulLife: BigInt! # uint64
  price: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PayOutEarnings @entity(immutable: true) {
  id: Bytes!
  renter: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  reportUri: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PayOutEarningsAllRented @entity(immutable: true) {
  id: Bytes!
  renter: Bytes! # address
  amount: BigInt! # uint256
  reportUri: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PayOutEarningsMultiple @entity(immutable: true) {
  id: Bytes!
  renter: Bytes! # address
  tokenIds: [BigInt!]! # uint256[]
  amount: BigInt! # uint256
  reportUri: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateUser @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  user: Bytes! # address
  expires: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateUsers @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  expires: BigInt! # uint64
  tokenIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AddNewCollection @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  collection: Bytes! # address
  tokenAddress: Bytes! # address
  revenueShareRatio: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTListed @entity(immutable: true) {
  id: Bytes!
  nftAddress: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTUnlisted @entity(immutable: true) {
  id: Bytes!
  nftAddress: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTsListed @entity(immutable: true) {
  id: Bytes!
  nftAddress: Bytes! # address
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTsUnlisted @entity(immutable: true) {
  id: Bytes!
  nftAddress: Bytes! # address
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLendingOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLendingPaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RenterRegistered @entity(immutable: true) {
  id: Bytes!
  nftAddr: Bytes! # address
  renterAddr: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RenterUnregistered @entity(immutable: true) {
  id: Bytes!
  nftAddr: Bytes! # address
  renterAddr: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SettlementReportAdded @entity(immutable: true) {
  id: Bytes!
  nftAddress: Bytes! # address
  renter: Bytes! # address
  settlementDate: BigInt! # uint64
  reportUri: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SettlementReportUpdated @entity(immutable: true) {
  id: Bytes!
  nftAddress: Bytes! # address
  renter: Bytes! # address
  settlementDate: BigInt! # uint64
  reportUri: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLendingUnpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type NFTBought @entity(immutable: true) {
  id: Bytes!
  collection: Bytes! # address
  tokenId: BigInt! # uint256
  price: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTListedForSale @entity(immutable: true) {
  id: Bytes!
  collection: Bytes! # address
  tokenId: BigInt! # uint256
  price: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTsBought @entity(immutable: true) {
  id: Bytes!
  collection: Bytes! # address
  prices: [BigInt!]! # uint256[]
  tokenIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTsListedForSale @entity(immutable: true) {
  id: Bytes!
  collection: Bytes! # address
  price: BigInt! # uint256
  tokenIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasMarketplaceOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasMarketplacePaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasMarketplaceUnpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type TomaasLPNApproval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLPNApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLPNBatchMetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _fromTokenId: BigInt! # uint256
  _toTokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLPNMetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLPNOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLPNPaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLPNTransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasLPNUnpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AddTLNAddress @entity(immutable: true) {
  id: Bytes!
  tlnAddr: Bytes! # address
  tokenAddr: Bytes! # address
  price: BigInt! # uint256
  rates: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddTRNAddress @entity(immutable: true) {
  id: Bytes!
  trnAddr: Bytes! # address
  acceptedToken: Bytes! # address
  revenueShareRatio: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Claim @entity(immutable: true) {
  id: Bytes!
  tlnAddr: Bytes! # address
  staker: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimFromTRNs @entity(immutable: true) {
  id: Bytes!
  trnAddr: Bytes! # address
  amount: BigInt! # uint256
  countOfTRNs: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasStakingOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasStakingPaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SellTRNsToPool @entity(immutable: true) {
  id: Bytes!
  trnAddr: Bytes! # address
  buyer: Bytes! # address
  tokenIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeTLNs @entity(immutable: true) {
  id: Bytes!
  tlnAddr: Bytes! # address
  staker: Bytes! # address
  tokenIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TomaasStakingUnpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UnstakeTLNs @entity(immutable: true) {
  id: Bytes!
  tlnAddr: Bytes! # address
  staker: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
